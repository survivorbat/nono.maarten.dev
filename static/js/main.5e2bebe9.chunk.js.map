{"version":3,"sources":["components/Tile.tsx","components/RowHint.tsx","components/Row.tsx","components/Grid.tsx","logic/GameRow.ts","logic/errors/InvalidGridSize.ts","logic/GameGrid.ts","logic/GameTile.ts","logic/Generator.ts","components/ErrorField.tsx","components/NewGame.tsx","components/SuccessField.tsx","App.tsx","index.tsx"],"names":["Tile","_ref","tile","select","solved","react","onClick","isSelected","undefined","className","concat","RowHint","hints","vertical","style","flexDirection","map","hint","key","Row","row","columns","components_RowHint","isCorrect","getHints","tiles","components_Tile","Grid","grid","ref","useRef","_useState","useState","setWindowWidth","Object","slicedToArray","_useState3","setWindowHeight","resizeWindow","window","innerWidth","innerHeight","useEffect","addEventListener","removeEventListener","gridLength","rows","length","gridSize","Math","round","sqrt","gridStyle","gridTemplateColumns","gridTemplateRows","height","width","columnHints","components_Row","GameRow","classCallCheck","this","createClass","value","some","reduce","result","getSolution","filter","InvalidGridSize","_Error","expected","actual","possibleConstructorReturn","getPrototypeOf","call","inherits","wrapNativeSuper","Error","GameGrid","size","rowHints","pow","current","index","floor","Array","fill","column","GameTile","solution","selected","generateGrid","random","ErrorField","message","NewGame","newGame","type","SuccessField","App","_useState2","difficulty","setDifficulty","_useState4","setGrid","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","successMessage","setSuccessMessage","Container","fluid","Col","components_Grid","e","components_ErrorField","components_SuccessField","components_NewGame","ReactDOM","render","react_default","a","createElement","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5e2bebe9.chunk.js","sourcesContent":["import * as React from 'react';\nimport GameTile from '../logic/GameTile';\n\ninterface TileProps {\n  tile: GameTile;\n  solved: boolean;\n  select: (tile: GameTile) => void;\n}\n\nfunction Tile({ tile, select, solved }: TileProps) {\n  return (\n    <div\n      onClick={!tile.isSelected() && !solved ? () => select(tile) : undefined}\n      className={`tile tile-${tile.isSelected() ? '' : 'un'}selected ${\n        solved ? 'tile-solved' : ''\n      }`}\n    />\n  );\n}\n\nexport default Tile;\n","import * as React from 'react';\n\ninterface RowHintProps {\n  hints: number[];\n  solved: boolean;\n  vertical?: boolean;\n}\n\nfunction RowHint({ hints, solved, vertical }: RowHintProps) {\n  return (\n    <div\n      style={{ flexDirection: vertical ? 'column' : 'row' }}\n      className={`grid-hint ${solved ? ' hint-solved' : ''}`}\n    >\n      {hints.map((hint, key) => (\n        <span key={key} className=\"row-hint-number\">\n          {hint}\n        </span>\n      ))}\n    </div>\n  );\n}\n\nexport default RowHint;\n","import * as React from 'react';\nimport { Fragment } from 'react';\nimport Tile from './Tile';\nimport GameRow from '../logic/GameRow';\nimport GameTile from '../logic/GameTile';\nimport RowHint from './RowHint';\n\ninterface RowProps {\n  row: GameRow;\n  columns: GameRow[];\n  select: (index: GameTile) => void;\n}\n\nfunction Row({ row, columns, select }: RowProps) {\n  return (\n    <>\n      <div className=\"grid-column-hint\">\n        <RowHint solved={row.isCorrect()} hints={row.getHints()} />\n      </div>\n      {row.tiles.map((tile, key) => (\n        <Tile\n          solved={columns[key].isCorrect() || row.isCorrect()}\n          tile={tile}\n          select={select}\n          key={key}\n        />\n      ))}\n      <div />\n    </>\n  );\n}\n\nexport default Row;\n","import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport Row from './Row';\nimport GameGrid from '../logic/GameGrid';\nimport GameTile from '../logic/GameTile';\nimport RowHint from './RowHint';\nimport './Grid.css';\n\ninterface GridProps {\n  grid: GameGrid;\n  select: (tile: GameTile) => void;\n}\n\nfunction Grid({ grid, select }: GridProps) {\n  const ref = useRef<HTMLDivElement>();\n  const [, setWindowWidth] = useState(0);\n  const [, setWindowHeight] = useState(0);\n\n  // Should be triggered on window resize to re-render the cell width\n  const resizeWindow = () => {\n    setWindowWidth(window.innerWidth);\n    setWindowHeight(window.innerHeight);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', resizeWindow);\n    return () => window.removeEventListener('resize', resizeWindow);\n  }, []);\n\n  const gridLength = grid.rows.length + 2;\n  const gridSize = Math.round(Math.sqrt(window.innerWidth * 400));\n  const gridStyle = {\n    gridTemplateColumns: `repeat(${gridLength},1fr)`,\n    gridTemplateRows: `repeat(${gridLength}, 1fr)`,\n    height: gridSize,\n    width: gridSize,\n  };\n\n  return (\n    <div className=\"grid-grid\" style={gridStyle} ref={ref as any}>\n      <div />\n      {grid.columnHints.map((hints, key) => (\n        <RowHint\n          vertical\n          key={key}\n          solved={grid.columns[key].isCorrect()}\n          hints={hints}\n        />\n      ))}\n      <div />\n      {grid.rows.map((row, key) => (\n        <Row row={row} columns={grid.columns} key={key} select={select} />\n      ))}\n    </div>\n  );\n}\n\nexport default Grid;\n","import GameTile from './GameTile';\n\nexport default class GameRow {\n  constructor(public readonly tiles: GameTile[]) {}\n\n  isCorrect(): boolean {\n    return !this.tiles.some((value) => !value.isCorrect());\n  }\n\n  getHints(): number[] {\n    return this.tiles\n      .reduce(\n        (result, tile) => {\n          if (tile.getSolution()) {\n            result[result.length - 1] += 1;\n            return result;\n          }\n\n          return result.concat(0);\n        },\n        [0],\n      )\n      .filter((hint) => hint !== 0);\n  }\n}\n","export default class InvalidGridSize extends Error {\n  constructor(expected: number, actual: number) {\n    super(`invalid tiles length, got ${actual} instead of ${expected}`);\n  }\n}\n","import GameTile from './GameTile';\nimport GameRow from './GameRow';\nimport InvalidGridSize from './errors/InvalidGridSize';\n\nexport default class GameGrid {\n  public readonly columnHints: number[][];\n\n  public readonly rowHints: number[][];\n\n  public readonly rows: GameRow[];\n\n  public readonly columns: GameRow[];\n\n  constructor(public readonly tiles: GameTile[], public readonly size: number) {\n    if (tiles.length !== size ** 2) {\n      throw new InvalidGridSize(size ** 2, tiles.length);\n    }\n\n    this.rows = tiles\n      .reduce((result, current, index) => {\n        const key = Math.floor((index + 0.1) / size);\n        result[key] = result[key].concat(current);\n        return result;\n      }, new Array(size).fill([]))\n      .map((result) => new GameRow(result));\n\n    this.rowHints = this.rows.map((row) => row.getHints());\n\n    this.columns = tiles\n      .reduce((result, current, index) => {\n        const key = index % size;\n        result[key] = result[key].concat(current);\n        return result;\n      }, new Array(size).fill([]))\n      .map((result) => new GameRow(result));\n\n    this.columnHints = this.columns.map((column) => column.getHints());\n  }\n\n  isCorrect(): boolean {\n    return !this.tiles.some((value) => !value.isCorrect());\n  }\n}\n","export default class GameTile {\n  private selected: boolean = false;\n\n  constructor(private readonly solution: boolean) {}\n\n  isCorrect(): boolean {\n    return this.selected === this.solution;\n  }\n\n  getSolution(): boolean {\n    return this.solution;\n  }\n\n  isSelected(): boolean {\n    return this.selected;\n  }\n\n  select(): void {\n    if (this.selected) {\n      throw new Error('tile already selected');\n    }\n\n    if (!this.solution) {\n      throw new Error('tile must not be selected');\n    }\n\n    this.selected = true;\n  }\n}\n","import GameGrid from './GameGrid';\nimport GameTile from './GameTile';\n\nconst generateGrid = (size: number): GameGrid => {\n  const list = new Array(size ** 2).fill(0);\n\n  const result = list.map(() => new GameTile(Math.random() <= 0.7));\n\n  return new GameGrid(result, size);\n};\n\nexport default generateGrid;\n","import * as React from 'react';\nimport './ErrorField.css';\n\ninterface ErrorFieldProps {\n  message: string;\n}\n\nfunction ErrorField({ message }: ErrorFieldProps) {\n  return <p className=\"error-field\">{message}</p>;\n}\n\nexport default ErrorField;\n","import * as React from 'react';\nimport './NewGame.css';\n\ninterface NewGameProps {\n  newGame: () => void;\n}\n\nfunction NewGame({ newGame }: NewGameProps) {\n  return (\n    <div className=\"new-game-container\">\n      <button type=\"button\" onClick={newGame} className=\"new-game-button\">\n        New Game\n      </button>\n    </div>\n  );\n}\n\nexport default NewGame;\n","import * as React from 'react';\nimport './SuccessField.css';\n\ninterface SuccessFieldProps {\n  message: string;\n}\n\nfunction SuccessField({ message }: SuccessFieldProps) {\n  return <p className=\"success-field\">{message}</p>;\n}\n\nexport default SuccessField;\n","import * as React from 'react';\nimport { useState } from 'react';\nimport './App.css';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Grid from './components/Grid';\nimport generateGrid from './logic/Generator';\nimport GameTile from './logic/GameTile';\nimport GameGrid from './logic/GameGrid';\nimport ErrorField from './components/ErrorField';\nimport NewGame from './components/NewGame';\nimport SuccessField from './components/SuccessField';\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState(2);\n  const [grid, setGrid] = useState(generateGrid(difficulty));\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleGridSelect = (tile: GameTile) => {\n    try {\n      tile.select();\n      setErrorMessage('');\n    } catch (e) {\n      setErrorMessage('Oops, that one was wrong!');\n      setDifficulty(difficulty - 1 < 4 ? difficulty - 1 : difficulty);\n    }\n    setGrid(new GameGrid(grid.tiles, grid.size));\n\n    if (grid.isCorrect()) {\n      setSuccessMessage('Congrats, you solved the puzzle!');\n      setDifficulty(difficulty + 1);\n    }\n  };\n\n  const newGame = () => {\n    setGrid(generateGrid(difficulty));\n    setSuccessMessage('');\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col className=\"d-flex justify-content-center\">\n          <Grid grid={grid} select={handleGridSelect} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ErrorField message={errorMessage} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <SuccessField message={successMessage} />\n        </Col>\n      </Row>\n      <NewGame newGame={newGame} />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}