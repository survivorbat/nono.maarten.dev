{"version":3,"sources":["components/Tile.tsx","components/RowHint.tsx","components/Row.tsx","components/Grid.tsx","logic/GameRow.ts","logic/errors/InvalidGridSize.ts","logic/GameGrid.ts","logic/GameTile.ts","logic/Generator.ts","components/ErrorField.tsx","components/NewGame.tsx","components/SuccessField.tsx","App.tsx","index.tsx"],"names":["Tile","_ref","tile","select","solved","style","react","onClick","isSelected","undefined","className","concat","RowHint","hints","vertical","tileStyle","Object","objectSpread","flexDirection","map","hint","key","Row","row","columns","components_RowHint","isCorrect","getHints","tiles","components_Tile","Grid","grid","ref","useRef","_useState","useState","_useState2","slicedToArray","windowWidth","setWindowWidth","_useState3","_useState4","windowHeight","setWindowHeight","_useState5","_useState6","elementHeight","setElementHeight","resizeWindow","window","innerWidth","innerHeight","useEffect","addEventListener","removeEventListener","useLayoutEffect","current","offsetHeight","gridLength","rows","length","tileSize","width","height","columnHints","components_Row","GameRow","classCallCheck","this","createClass","value","some","reduce","result","getSolution","filter","InvalidGridSize","_Error","expected","actual","possibleConstructorReturn","getPrototypeOf","call","inherits","wrapNativeSuper","Error","GameGrid","size","rowHints","Math","pow","index","floor","Array","fill","column","GameTile","solution","selected","generateGrid","random","ErrorField","message","NewGame","newGame","type","SuccessField","App","difficulty","setDifficulty","setGrid","errorMessage","setErrorMessage","_useState7","_useState8","successMessage","setSuccessMessage","Container","fluid","Col","components_Grid","e","components_NewGame","components_ErrorField","components_SuccessField","ReactDOM","render","react_default","a","createElement","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bb6fcfdf.chunk.js","sourcesContent":["import * as React from 'react';\nimport GameTile from '../logic/GameTile';\n\ninterface TileProps {\n  tile: GameTile;\n  style: any;\n  solved: boolean;\n  select: (tile: GameTile) => void;\n}\n\nfunction Tile({\n  tile, select, solved, style,\n}: TileProps) {\n  return (\n    <div\n      style={style}\n      onClick={!tile.isSelected() && !solved ? () => select(tile) : undefined}\n      className={`tile tile-${tile.isSelected() ? '' : 'un'}selected ${\n        solved ? 'tile-solved' : ''\n      }`}\n    />\n  );\n}\n\nexport default Tile;\n","import * as React from 'react';\n\ninterface RowHintProps {\n  hints: number[];\n  solved: boolean;\n  tileStyle: any;\n  vertical?: boolean;\n}\n\nfunction RowHint({\n  hints, solved, vertical, tileStyle,\n}: RowHintProps) {\n  return (\n    <div\n      style={{ ...tileStyle, flexDirection: vertical ? 'column' : 'row' }}\n      className={`grid-hint ${solved ? 'hint-solved' : ''}`}\n    >\n      {hints.map((hint, key) => (\n        <span key={key} className=\"row-hint-number\">\n          {hint}\n        </span>\n      ))}\n    </div>\n  );\n}\n\nexport default RowHint;\n","import * as React from 'react';\nimport Tile from './Tile';\nimport GameRow from '../logic/GameRow';\nimport GameTile from '../logic/GameTile';\nimport RowHint from './RowHint';\n\ninterface RowProps {\n  row: GameRow;\n  tileStyle: any;\n  columns: GameRow[];\n  select: (index: GameTile) => void;\n}\n\nfunction Row({\n  row, columns, select, tileStyle,\n}: RowProps) {\n  return (\n    <div className=\"grid-row\">\n      <div className=\"grid-column-hint\" style={tileStyle}>\n        <RowHint\n          tileStyle={tileStyle}\n          solved={row.isCorrect()}\n          hints={row.getHints()}\n        />\n      </div>\n      {row.tiles.map((tile, key) => (\n        <Tile\n          style={tileStyle}\n          solved={columns[key].isCorrect() || row.isCorrect()}\n          tile={tile}\n          select={select}\n          key={key}\n        />\n      ))}\n      <div style={tileStyle} />\n    </div>\n  );\n}\n\nexport default Row;\n","import * as React from 'react';\nimport {\n  useEffect, useLayoutEffect, useRef, useState,\n} from 'react';\nimport Row from './Row';\nimport GameGrid from '../logic/GameGrid';\nimport GameTile from '../logic/GameTile';\nimport RowHint from './RowHint';\nimport './Grid.css';\n\ninterface GridProps {\n  grid: GameGrid;\n  select: (tile: GameTile) => void;\n}\n\nfunction Grid({ grid, select }: GridProps) {\n  const ref = useRef<HTMLDivElement>();\n  const [windowWidth, setWindowWidth] = useState(0);\n  const [windowHeight, setWindowHeight] = useState(0);\n  const [elementHeight, setElementHeight] = useState(0);\n\n  // Should be triggered on window resize to re-render the cell width\n  const resizeWindow = () => {\n    setWindowWidth(window.innerWidth);\n    setWindowHeight(window.innerHeight);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', resizeWindow);\n    return () => window.removeEventListener('resize', resizeWindow);\n  }, []);\n\n  useLayoutEffect(() => {\n    setElementHeight(ref.current!.offsetHeight);\n  }, [windowWidth, windowHeight]);\n\n  const gridLength = grid.rows.length + 2;\n  const tileSize = (elementHeight * 0.7) / gridLength;\n  const tileStyle = { width: `${tileSize}px`, height: `${tileSize}px` };\n\n  return (\n    <div className=\"grid-grid\" ref={ref as any}>\n      <div className=\"grid-row\">\n        <div style={tileStyle} />\n        {grid.columnHints.map((hints, key) => (\n          <RowHint\n            vertical\n            tileStyle={tileStyle}\n            key={key}\n            solved={grid.columns[key].isCorrect()}\n            hints={hints}\n          />\n        ))}\n        <div style={tileStyle} />\n      </div>\n      {grid.rows.map((row, key) => (\n        <Row\n          tileStyle={tileStyle}\n          row={row}\n          columns={grid.columns}\n          key={key}\n          select={select}\n        />\n      ))}\n      <div className=\"grid-row\" style={{ height: tileStyle.height }}>\n        <span>{`${gridLength - 2} x ${gridLength - 2}`}</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Grid;\n","import GameTile from './GameTile';\n\nexport default class GameRow {\n  constructor(public readonly tiles: GameTile[]) {}\n\n  isCorrect(): boolean {\n    return !this.tiles.some((value) => !value.isCorrect());\n  }\n\n  getHints(): number[] {\n    return this.tiles\n      .reduce(\n        (result, tile) => {\n          if (tile.getSolution()) {\n            result[result.length - 1]++;\n            return result;\n          }\n\n          return result.concat(0);\n        },\n        [0],\n      )\n      .filter((hint) => hint !== 0);\n  }\n}\n","export default class InvalidGridSize extends Error {\n  constructor(expected: number, actual: number) {\n    super(`invalid tiles length, got ${actual} instead of ${expected}`);\n  }\n}\n","import GameTile from './GameTile';\nimport GameRow from './GameRow';\nimport InvalidGridSize from './errors/InvalidGridSize';\n\nexport default class GameGrid {\n  public readonly columnHints: number[][];\n\n  public readonly rowHints: number[][];\n\n  public readonly rows: GameRow[];\n\n  public readonly columns: GameRow[];\n\n  constructor(public readonly tiles: GameTile[], public readonly size: number) {\n    if (tiles.length !== size ** 2) {\n      throw new InvalidGridSize(size ** 2, tiles.length);\n    }\n\n    this.rows = tiles\n      .reduce((result, current, index) => {\n        const key = Math.floor((index + 0.1) / size);\n        result[key] = result[key].concat(current);\n        return result;\n      }, new Array(size).fill([]))\n      .map((tiles) => new GameRow(tiles));\n\n    this.rowHints = this.rows.map((row) => row.getHints());\n\n    this.columns = tiles\n      .reduce((result, current, index) => {\n        const key = index % size;\n        result[key] = result[key].concat(current);\n        return result;\n      }, new Array(size).fill([]))\n      .map((tiles) => new GameRow(tiles));\n\n    this.columnHints = this.columns.map((column) => column.getHints());\n  }\n\n  isCorrect(): boolean {\n    return !this.tiles.some((value) => !value.isCorrect());\n  }\n}\n","export default class GameTile {\n  private selected: boolean = false;\n\n  constructor(private readonly solution: boolean) {}\n\n  isCorrect(): boolean {\n    return this.selected === this.solution;\n  }\n\n  getSolution(): boolean {\n    return this.solution;\n  }\n\n  isSelected(): boolean {\n    return this.selected;\n  }\n\n  select(): void {\n    if (this.selected) {\n      throw new Error('tile already selected');\n    }\n\n    if (!this.solution) {\n      throw new Error('tile must not be selected');\n    }\n\n    this.selected = true;\n  }\n}\n","import GameGrid from './GameGrid';\nimport GameTile from './GameTile';\n\nconst generateGrid = (size: number): GameGrid => {\n  const list = new Array(size ** 2).fill(0);\n\n  const result = list.map(() => new GameTile(Math.random() <= 0.7));\n\n  return new GameGrid(result, size);\n};\n\nexport default generateGrid;\n","import * as React from 'react';\nimport './ErrorField.css';\n\ninterface ErrorFieldProps {\n  message: string;\n}\n\nfunction ErrorField({ message }: ErrorFieldProps) {\n  return <p className=\"error-field\">{message}</p>;\n}\n\nexport default ErrorField;\n","import * as React from 'react';\nimport './NewGame.css';\n\ninterface NewGameProps {\n  newGame: () => void;\n}\n\nfunction NewGame({ newGame }: NewGameProps) {\n  return (\n    <div className=\"new-game-container\">\n      <button type=\"button\" onClick={newGame} className=\"new-game-button\">\n        New Game\n      </button>\n    </div>\n  );\n}\n\nexport default NewGame;\n","import * as React from 'react';\nimport './SuccessField.css';\n\ninterface SuccessFieldProps {\n  message: string;\n}\n\nfunction SuccessField({ message }: SuccessFieldProps) {\n  return <p className=\"success-field\">{message}</p>;\n}\n\nexport default SuccessField;\n","import * as React from 'react';\nimport { useState } from 'react';\nimport './App.css';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Grid from './components/Grid';\nimport generateGrid from './logic/Generator';\nimport GameTile from './logic/GameTile';\nimport GameGrid from './logic/GameGrid';\nimport ErrorField from './components/ErrorField';\nimport NewGame from './components/NewGame';\nimport SuccessField from './components/SuccessField';\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState(2);\n  const [grid, setGrid] = useState(generateGrid(difficulty));\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleGridSelect = (tile: GameTile) => {\n    try {\n      tile.select();\n      setErrorMessage('');\n    } catch (e) {\n      setErrorMessage('Oops, that one was wrong!');\n      setDifficulty(difficulty - 1 < 2 ? difficulty - 1 : difficulty);\n    }\n    setGrid(new GameGrid(grid.tiles, grid.size));\n\n    if (grid.isCorrect()) {\n      setSuccessMessage('Congrats, you solved the puzzle!');\n      setDifficulty(difficulty + 1);\n    }\n  };\n\n  const newGame = () => {\n    setGrid(generateGrid(difficulty));\n    setSuccessMessage('');\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Grid grid={grid} select={handleGridSelect} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <NewGame newGame={newGame} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ErrorField message={errorMessage} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <SuccessField message={successMessage} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}