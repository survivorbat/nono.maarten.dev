{"version":3,"sources":["components/Tile.tsx","components/RowHint.tsx","components/Row.tsx","components/Grid.tsx","logic/GameRow.ts","logic/errors/InvalidGridSize.ts","logic/GameGrid.ts","logic/GameTile.ts","logic/Generator.ts","components/ErrorField.tsx","components/NewGame.tsx","components/SuccessField.tsx","App.tsx","index.tsx"],"names":["Tile","_ref","tile","select","solved","react","onClick","isSelected","undefined","className","concat","RowHint","hints","vertical","map","hint","key","Row","row","columns","components_RowHint","isCorrect","getHints","tiles","components_Tile","Grid","grid","columnHints","rows","components_Row","GameRow","Object","classCallCheck","this","createClass","value","some","reduce","result","getSolution","length","filter","InvalidGridSize","_Error","expected","actual","possibleConstructorReturn","getPrototypeOf","call","inherits","wrapNativeSuper","Error","GameGrid","size","rowHints","Math","pow","current","index","floor","Array","fill","column","GameTile","solution","selected","generateGrid","random","ErrorField","message","NewGame","newGame","SuccessField","App","_useState","useState","_useState2","slicedToArray","difficulty","setDifficulty","_useState3","_useState4","setGrid","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","successMessage","setSuccessMessage","Container","Col","components_Grid","e","components_ErrorField","components_SuccessField","components_NewGame","ReactDOM","render","react_default","a","createElement","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4e7b87a8.chunk.js","sourcesContent":["import * as React from 'react';\nimport GameTile from '../logic/GameTile';\n\ninterface TileProps {\n  tile: GameTile;\n  solved: boolean;\n  select: (tile: GameTile) => void;\n}\n\nfunction Tile({ tile, select, solved }: TileProps) {\n  return (\n    <td\n      onClick={!tile.isSelected() && !solved ? () => select(tile) : undefined}\n      className={`tile tile-${tile.isSelected() ? '' : 'un'}selected ${\n        solved ? 'tile-solved' : ''\n      }`}\n    />\n  );\n}\n\nexport default Tile;\n","import * as React from 'react';\n\ninterface RowHintProps {\n  hints: number[];\n  solved: boolean;\n  vertical?: boolean;\n}\n\nfunction RowHint({ hints, solved, vertical }: RowHintProps) {\n  return (\n    <div\n      className={`${vertical ? 'column-hint' : 'row-hint'} ${\n        solved ? 'hint-solved' : ''\n      }`}\n    >\n      {hints.map((hint, key) => (\n        <span key={key} className=\"row-hint-number\">\n          {hint}\n        </span>\n      ))}\n    </div>\n  );\n}\n\nexport default RowHint;\n","import * as React from 'react';\nimport Tile from './Tile';\nimport GameRow from '../logic/GameRow';\nimport GameTile from '../logic/GameTile';\nimport RowHint from './RowHint';\n\nfunction Row({\n  row,\n  columns,\n  select,\n}: {\n  row: GameRow;\n  columns: GameRow[];\n  select: (index: GameTile) => void;\n}) {\n  return (\n    <tr>\n      <td>\n        <RowHint solved={row.isCorrect()} hints={row.getHints()} />\n      </td>\n      {row.tiles.map((tile, key) => (\n        <Tile\n          solved={columns[key].isCorrect() || row.isCorrect()}\n          tile={tile}\n          select={select}\n          key={key}\n        />\n      ))}\n    </tr>\n  );\n}\n\nexport default Row;\n","import * as React from 'react';\nimport Row from './Row';\nimport GameGrid from '../logic/GameGrid';\nimport GameTile from '../logic/GameTile';\nimport RowHint from './RowHint';\nimport './Grid.css';\n\ninterface GridProps {\n  grid: GameGrid;\n  select: (tile: GameTile) => void;\n}\n\nfunction Grid({ grid, select }: GridProps) {\n  return (\n    <div className=\"grid-container\">\n      <table className=\"grid\">\n        <thead>\n          <tr>\n            <td />\n            {grid.columnHints.map((hints, key) => (\n              <td key={key}>\n                <RowHint\n                  vertical\n                  solved={grid.columns[key].isCorrect()}\n                  hints={hints}\n                />\n              </td>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {grid.rows.map((row, key) => (\n            <Row row={row} columns={grid.columns} key={key} select={select} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Grid;\n","import GameTile from './GameTile';\n\nexport default class GameRow {\n  constructor(public readonly tiles: GameTile[]) {}\n\n  isCorrect(): boolean {\n    return !this.tiles.some((value) => !value.isCorrect());\n  }\n\n  getHints(): number[] {\n    return this.tiles\n      .reduce(\n        (result, tile) => {\n          if (tile.getSolution()) {\n            result[result.length - 1]++;\n            return result;\n          }\n\n          return result.concat(0);\n        },\n        [0],\n      )\n      .filter((hint) => hint !== 0);\n  }\n}\n","export default class InvalidGridSize extends Error {\n  constructor(expected: number, actual: number) {\n    super(`invalid tiles length, got ${actual} instead of ${expected}`);\n  }\n}\n","import GameTile from './GameTile';\nimport GameRow from './GameRow';\nimport InvalidGridSize from './errors/InvalidGridSize';\n\nexport default class GameGrid {\n  public readonly columnHints: number[][];\n\n  public readonly rowHints: number[][];\n\n  public readonly rows: GameRow[];\n\n  public readonly columns: GameRow[];\n\n  constructor(public readonly tiles: GameTile[], public readonly size: number) {\n    if (tiles.length !== size ** 2) {\n      throw new InvalidGridSize(size ** 2, tiles.length);\n    }\n\n    this.rows = tiles\n      .reduce((result, current, index) => {\n        const key = Math.floor((index + 0.1) / size);\n        result[key] = result[key].concat(current);\n        return result;\n      }, new Array(size).fill([]))\n      .map((tiles) => new GameRow(tiles));\n\n    this.rowHints = this.rows.map((row) => row.getHints());\n\n    this.columns = tiles\n      .reduce((result, current, index) => {\n        const key = index % size;\n        result[key] = result[key].concat(current);\n        return result;\n      }, new Array(size).fill([]))\n      .map((tiles) => new GameRow(tiles));\n\n    this.columnHints = this.columns.map((column) => column.getHints());\n  }\n\n  isCorrect(): boolean {\n    return !this.tiles.some((value) => !value.isCorrect());\n  }\n}\n","export default class GameTile {\n  private selected: boolean = false;\n\n  constructor(private readonly solution: boolean) {}\n\n  isCorrect(): boolean {\n    return this.selected === this.solution;\n  }\n\n  getSolution(): boolean {\n    return this.solution;\n  }\n\n  isSelected(): boolean {\n    return this.selected;\n  }\n\n  select(): void {\n    if (this.selected) {\n      throw new Error('tile already selected');\n    }\n\n    if (!this.solution) {\n      throw new Error('tile must not be selected');\n    }\n\n    this.selected = true;\n  }\n}\n","import GameGrid from './GameGrid';\nimport GameTile from './GameTile';\n\nconst generateGrid = (size: number): GameGrid => {\n  const list = new Array(size ** 2).fill(0);\n\n  const result = list.map(() => new GameTile(Math.random() <= 0.7));\n\n  return new GameGrid(result, size);\n};\n\nexport default generateGrid;\n","import * as React from 'react';\nimport './ErrorField.css';\n\ninterface ErrorFieldProps {\n  message: string;\n}\n\nfunction ErrorField({ message }: ErrorFieldProps) {\n  return <p className=\"error-field\">{message}</p>;\n}\n\nexport default ErrorField;\n","import * as React from 'react';\nimport './NewGame.css';\n\ninterface NewGameProps {\n  newGame: () => void;\n}\n\nfunction NewGame({ newGame }: NewGameProps) {\n  return (\n    <div className=\"new-game-container\">\n      <button onClick={newGame} className=\"new-game-button\">\n        New Game\n      </button>\n    </div>\n  );\n}\n\nexport default NewGame;\n","import * as React from 'react';\nimport './SuccessField.css';\n\ninterface SuccessFieldProps {\n  message: string;\n}\n\nfunction SuccessField({ message }: SuccessFieldProps) {\n  return <p className=\"success-field\">{message}</p>;\n}\n\nexport default SuccessField;\n","import * as React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Grid from './components/Grid';\nimport generateGrid from './logic/Generator';\nimport GameTile from './logic/GameTile';\nimport GameGrid from './logic/GameGrid';\nimport ErrorField from './components/ErrorField';\nimport NewGame from './components/NewGame';\nimport SuccessField from './components/SuccessField';\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState(2);\n  const [grid, setGrid] = useState(generateGrid(difficulty));\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleGridSelect = (tile: GameTile) => {\n    try {\n      tile.select();\n      setErrorMessage('');\n    } catch (e) {\n      setErrorMessage('Oops, that one was wrong!');\n      setDifficulty(difficulty - 1 < 2 ? difficulty - 1 : difficulty);\n    }\n    setGrid(new GameGrid(grid.tiles, grid.size));\n\n    if (grid.isCorrect()) {\n      setSuccessMessage('Congrats, you solved the puzzle!');\n      setDifficulty(difficulty + 1);\n    }\n  };\n\n  const newGame = () => {\n    setGrid(generateGrid(difficulty));\n    setSuccessMessage('');\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Grid grid={grid} select={handleGridSelect} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ErrorField message={errorMessage} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <SuccessField message={successMessage} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <NewGame newGame={newGame} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}